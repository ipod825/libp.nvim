local vimfn = require("libp.utils.vimfn")
local spy = require("luassert.spy")

describe("notify family", function()
    local notify = spy.on(vim, "notify")
    after_each(function()
        notify:clear()
    end)
    describe("info", function()
        it("Notify with info level", function()
            vimfn.info("msg")
            assert.spy(notify).was_called_with("msg", vim.log.levels.INFO)
        end)
    end)
    describe("warn", function()
        it("Notify with warn level", function()
            vimfn.warn("msg")
            assert.spy(notify).was_called_with("msg", vim.log.levels.WARN)
        end)
    end)
    describe("error", function()
        it("Notify with warn level", function()
            vimfn.error("msg")
            assert.spy(notify).was_called_with("msg", vim.log.levels.ERROR)
        end)
    end)
end)

describe("visual_rows", function()
    it("Returns current row in normal mode", function()
        vim.api.nvim_buf_set_lines(0, 0, -1, false, { "1", "2", "3" })
        vim.cmd("normal! j")

        local row_beg, row_end = vimfn.visual_rows()
        assert.are.same(2, row_beg)
        assert.are.same(2, row_end)
    end)
    it("Returns seleted row beg and end", function()
        vim.api.nvim_buf_set_lines(0, 0, -1, false, { "1", "2", "3" })
        vim.cmd("normal! ggVG")

        local row_beg, row_end = vimfn.visual_rows()
        assert.are.same(1, row_beg)
        assert.are.same(3, row_end)
    end)
end)

describe("ensure_exit_visual_mode", function()
    it("Stays in normal mode when called in normal mode.", function()
        vimfn.ensure_exit_visual_mode()
        assert.are.same("n", vim.fn.mode())
        vimfn.ensure_exit_visual_mode()
        assert.are.same("n", vim.fn.mode())
    end)
    it("Exit visual mode when called in visual line mode.", function()
        vimfn.ensure_exit_visual_mode()
        vim.cmd("normal! V")
        assert.are.same("V", vim.fn.mode())
        vimfn.ensure_exit_visual_mode()
        assert.are.same("n", vim.fn.mode())
    end)
    it("Exit visual mode when called in visual char mode.", function()
        vimfn.ensure_exit_visual_mode()
        vim.cmd("normal! v")
        assert.are.same("v", vim.fn.mode())
        vimfn.ensure_exit_visual_mode()
        assert.are.same("n", vim.fn.mode())
    end)
end)

describe("selected_rows", function()
    it("Selects the specified rows", function()
        vim.api.nvim_buf_set_lines(0, 0, -1, false, { "1", "2", "3" })

        vimfn.visual_select_rows(2, 3)
        local row_beg, row_end = vimfn.visual_rows()
        assert.are.same(2, row_beg)
        assert.are.same(3, row_end)

        vimfn.visual_select_rows(1, 3)
        row_beg, row_end = vimfn.visual_rows()

        assert.are.same(1, row_beg)
        assert.are.same(3, row_end)
    end)
end)

describe("setrow", function()
    it("Sets the row", function()
        vim.api.nvim_buf_set_lines(0, 0, -1, false, { "1", "2", "3" })
        vimfn.setrow(1)
        assert.are.same(1, vim.api.nvim_win_get_cursor(0)[1])
        vimfn.setrow(2)
        assert.are.same(2, vim.api.nvim_win_get_cursor(0)[1])
    end)
end)

describe("first_visible_line", function()
    it("Returns seleted row beg and end", function()
        local content = {}
        for i = 1, 2 * vim.o.lines do
            table.insert(content, tostring(i))
        end
        vim.api.nvim_buf_set_lines(0, 0, -1, false, content)

        assert.are.same(1, vimfn.first_visible_line())
        assert.are.same(vim.o.lines - 2, vimfn.last_visible_line())

        vim.cmd("normal! ")
        assert.are.same(2, vimfn.first_visible_line())
        assert.are.same(vim.o.lines - 1, vimfn.last_visible_line())
    end)
end)

describe("all_rows", function()
    it("Returns 1, line('$')", function()
        vim.api.nvim_buf_set_lines(0, 0, -1, false, { "1", "2", "3" })

        local row_beg, row_end = vimfn.all_rows()
        assert.are.same(1, row_beg)
        assert.are.same(3, row_end)
    end)
end)

describe("current_row", function()
    it("Returns the current row", function()
        vim.api.nvim_buf_set_lines(0, 0, -1, false, { "1", "2", "3" })
        vimfn.setrow(1)
        assert.are.same(1, vimfn.current_row())
        vimfn.setrow(2)
        assert.are.same(2, vimfn.current_row())
        vimfn.setrow(3)
        assert.are.same(3, vimfn.current_row())
    end)
end)

describe("editable_width", function()
    it("Returns width excluding gutter", function()
        vim.o.number = false
        local ori_winwidth = vim.api.nvim_win_get_width(0)
        assert.are.same(ori_winwidth, vimfn.editable_width(0))
        vim.o.number = true
        assert.are.same(ori_winwidth - 4, vimfn.editable_width(0))
        vim.o.number = false
    end)
end)

describe("win_get_var", function()
    it("Returns nil if variable missing", function()
        assert.is_nil(vimfn.win_get_var(0, "no_such_var"))
    end)

    it("Returns the window variable if present", function()
        vim.api.nvim_win_set_var(0, "var", 1)
        assert.are.same(1, vimfn.win_get_var(0, "var"))
    end)
end)

describe("str_to_char", function()
    it("Returns characters of a string", function()
        assert.are.same({ "中", "文" }, vimfn.str_to_char("中文"))
        assert.are.same({ "に", "ほ", "ん", "ご" }, vimfn.str_to_char("にほんご"))
        assert.are.same({ "한", "국", "인" }, vimfn.str_to_char("한국인"))
        assert.are.same({ "e", "n", "g", "l", "i", "s", "h" }, vimfn.str_to_char("english"))
        assert.are.same({ "中", "e", "に", "한" }, vimfn.str_to_char("中eに한"))
    end)
end)
