local Set = require("libp.datatype.Set")

describe("Constructor", function()
    it("Takes zero argument.", function()
        local s = Set()
        assert.are.same(0, Set.size(s))
    end)

    it("Removes duplicate elements.", function()
        local s = Set({ "a", "b", "c", "c" })
        assert.are.same(3, Set.size(s))
        assert.is_truthy(Set.has(s, "a"))
        assert.is_truthy(Set.has(s, "b"))
        assert.is_truthy(Set.has(s, "c"))
    end)
end)

describe("eq", function()
    it("Returns true if two sets are equal.", function()
        assert.same(Set({ 1, 2 }), Set({ 1, 2 }))
    end)
    it("Returns false if two sets are not equal.", function()
        assert.are_not.same(Set({ 1, 2 }), Set({ 1, 2, 3 }))
    end)
end)

describe("add", function()
    it("Sets value to true by default", function()
        local s = Set({ "a", "b" })
        Set.add(s, "c")
        assert.are.same(true, s["c"])
    end)
    it("Respects optional value argument", function()
        local s = Set({ "a", "b" })
        Set.add(s, "c", 1)
        assert.are.same(1, s["c"])
    end)
    it("Does nothing if key presents", function()
        local s = Set({ "a", "b" })
        Set.add(s, "c", 1)
        assert.are.same(1, s["c"])
        Set.add(s, "c", 2)
        assert.are.same(1, s["c"])
    end)
end)

describe("remove", function()
    it("Removes element if present", function()
        local s = Set({ "a", "b" })
        Set.remove(s, "b")
        assert.falsy(Set.has(s, "b"))
    end)
    it("Does nothing if key is missing", function()
        local s = Set({ "a", "b" })
        Set.remove(s, "c")
        assert.are.same(2, Set.size(s))
    end)
end)

describe("has", function()
    it("Returns true if key presents", function()
        local s = Set({ "a", "b" })
        assert.truthy(Set.has(s, "a"))
        assert.truthy(Set.has(s, "b"))
    end)
    it("Returns false if key missing", function()
        local s = Set({ "a", "b" })
        assert.falsy(Set.has(s, "c"))
    end)
end)

describe("size", function()
    it("Returns the correct size", function()
        local s = Set({ "a", "b" })
        assert.are.same(2, Set.size(s))
        s = Set({ "a", "b", "c" })
        assert.are.same(3, Set.size(s))
    end)
end)

describe("empty", function()
    it("Returns if the set is empty", function()
        local s = Set({ "a" })
        assert.is_false(Set.empty(s))
        Set.remove(s, "a")
        assert.is_true(Set.empty(s))
    end)
end)

describe("iter", function()
    it("Iterates through its values", function()
        local s = Set({ 1, 2, 3 })
        local i = 1
        for e in Set.values(s) do
            assert.are.same(i, e)
            i = i + 1
        end
    end)
end)

describe("intersection", function()
    it("Returns intersected values", function()
        local s1 = Set({ "a", "b", "c" })
        local s2 = Set({ "b", "c", "d" })
        assert.are.same(Set({ "b", "c" }), Set.intersection(s1, s2))
    end)
    it("Returns empty set when no intersection", function()
        local s1 = Set({ "a", "b", "c" })
        local s2 = Set({ "d", "e" })
        assert.are.same(Set(), Set.intersection(s1, s2))
    end)
end)

describe("subtraction", function()
    it("Returns difference of set", function()
        local s1 = Set({ "a", "b", "c" })
        local s2 = Set({ "b", "c", "d" })
        assert.are.same(Set({ "a" }), s1 - s2)
        assert.are.same(Set({ "d" }), s2 - s1)
    end)
end)
