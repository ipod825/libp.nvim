local DoubleLinkList = require("libp.datatype.DoubleLinkList")
local Node = DoubleLinkList.Node

describe("form_list / to_list / to_reverse_list", function()
    it("Forms a list", function()
        local lst = DoubleLinkList.from_list({ 1, 2, 3, 4 })
        assert.are.same({ 1, 2, 3, 4 }, lst:to_list())
        assert.are.same({ 4, 3, 2, 1 }, lst:to_reverse_list())
        assert.are.same(1, lst.head.val)
        assert.are.same(4, lst.tail.val)
    end)
end)

describe("insert", function()
    it("Inserts node after tail", function()
        local lst = DoubleLinkList.from_list({ 1, 2 })
        local first = lst.head
        local second = first.right
        lst:insert(second, 3)

        assert.are.same({ 1, 2, 3 }, lst:to_list())
        assert.are.same({ 3, 2, 1 }, lst:to_reverse_list())
        assert.are.same(first, lst.head)
        assert.are.same(3, lst.tail.val)
    end)

    it("Inserts node in between", function()
        local lst = DoubleLinkList.from_list({ 1, 2 })
        local first = lst.head
        local second = first.right
        lst:insert(first, 3)

        assert.are.same({ 1, 3, 2 }, lst:to_list())
        assert.are.same({ 2, 3, 1 }, lst:to_reverse_list())
        assert.are.same(first, lst.head)
        assert.are.same(second, lst.tail)
    end)
end)

describe("push_front", function()
    it("Pushes to the front", function()
        local lst = DoubleLinkList()
        lst:push_front(1)
        assert.are.same({ 1 }, lst:to_list())
        assert.are.same({ 1 }, lst:to_reverse_list())
        lst:push_front(2)
        assert.are.same({ 2, 1 }, lst:to_list())
        assert.are.same({ 1, 2 }, lst:to_reverse_list())
    end)
end)

describe("push_back", function()
    it("Pushes to the back", function()
        local lst = DoubleLinkList()
        lst:push_back(1)
        assert.are.same({ 1 }, lst:to_list())
        assert.are.same({ 1 }, lst:to_reverse_list())
        lst:push_back(2)
        assert.are.same({ 1, 2 }, lst:to_list())
        assert.are.same({ 2, 1 }, lst:to_reverse_list())
    end)
end)

describe("pop_front", function()
    it("Works on empty list", function()
        local lst = DoubleLinkList()
        assert.are.same(nil, lst:pop_front())
    end)
    it("Pops single", function()
        local lst = DoubleLinkList.from_list({ 1 })
        assert.are.same(1, lst:pop_front().val)
        assert.are.same({}, lst:to_list())
    end)
    it("Pops from the front", function()
        local lst = DoubleLinkList.from_list({ 1, 2, 3 })
        assert.are.same(1, lst:pop_front().val)
        assert.are.same({ 2, 3 }, lst:to_list())
        assert.are.same({ 3, 2 }, lst:to_reverse_list())
        assert.are.same(2, lst:pop_front().val)
        assert.are.same(3, lst:pop_front().val)
        assert.are.same({}, lst:to_list())
        assert.are.same({}, lst:to_reverse_list())
    end)
end)

describe("pop_back", function()
    it("Works on empty list", function()
        local lst = DoubleLinkList()
        assert.are.same(nil, lst:pop_back())
    end)
    it("Pops single", function()
        local lst = DoubleLinkList.from_list({ 1 })
        assert.are.same(1, lst:pop_back().val)
        assert.are.same({}, lst:to_list())
    end)
    it("Pops from the back", function()
        local lst = DoubleLinkList.from_list({ 1, 2, 3 })
        assert.are.same(3, lst:pop_back().val)
        assert.are.same({ 1, 2 }, lst:to_list())
        assert.are.same({ 2, 1 }, lst:to_reverse_list())
        assert.are.same(2, lst:pop_back().val)
        assert.are.same(1, lst:pop_back().val)
        assert.are.same({}, lst:to_list())
        assert.are.same({}, lst:to_reverse_list())
    end)
end)

describe("remove", function()
    it("Removes single", function()
        local lst = DoubleLinkList.from_list({ 1 })
        lst:remove(lst.head)
        assert.are.same({}, lst:to_list())
    end)
    it("Removes middle", function()
        local lst = DoubleLinkList.from_list({ 1, 2, 3 })
        local middle = lst.head.right
        lst:remove(middle)
        assert.are.same({ 1, 3 }, lst:to_list())
    end)
    it("Removes front", function()
        local lst = DoubleLinkList.from_list({ 1, 2, 3 })
        lst:remove(lst.head)
        assert.are.same({ 2, 3 }, lst:to_list())
    end)
    it("Removes back", function()
        local lst = DoubleLinkList.from_list({ 1, 2, 3 })
        lst:remove(lst.tail)
        assert.are.same({ 1, 2 }, lst:to_list())
    end)
end)

describe("splice", function()
    describe("same list", function()
        local lst
        local first, second, third, fourth
        before_each(function()
            lst = DoubleLinkList.from_list({ 1, 2, 3, 4 })
            first = lst.head
            second = first.right
            third = second.right
            fourth = third.right
        end)

        describe("three args", function()
            it("1 to 1", function()
                lst:splice(first, lst, first)
                assert.are.same({ 1, 2, 3, 4 }, lst:to_list())
                assert.are.same({ 4, 3, 2, 1 }, lst:to_reverse_list())
            end)

            it("1 to 2", function()
                lst:splice(second, lst, first)
                assert.are.same({ 1, 2, 3, 4 }, lst:to_list())
                assert.are.same({ 4, 3, 2, 1 }, lst:to_reverse_list())
            end)

            it("1 to 3", function()
                lst:splice(third, lst, first)
                assert.are.same({ 2, 1, 3, 4 }, lst:to_list())
                assert.are.same({ 4, 3, 1, 2 }, lst:to_reverse_list())
            end)

            it("1 to 4", function()
                lst:splice(fourth, lst, first)
                assert.are.same({ 2, 3, 1, 4 }, lst:to_list())
                assert.are.same({ 4, 1, 3, 2 }, lst:to_reverse_list())
            end)

            it("2 to 1", function()
                lst:splice(first, lst, second)
                assert.are.same({ 2, 1, 3, 4 }, lst:to_list())
                assert.are.same({ 4, 3, 1, 2 }, lst:to_reverse_list())
            end)

            it("2 to 2 ", function()
                lst:splice(second, lst, second)
                assert.are.same({ 1, 2, 3, 4 }, lst:to_list())
                assert.are.same({ 4, 3, 2, 1 }, lst:to_reverse_list())
            end)

            it("2 to 3", function()
                lst:splice(third, lst, second)
                assert.are.same({ 1, 2, 3, 4 }, lst:to_list())
                assert.are.same({ 4, 3, 2, 1 }, lst:to_reverse_list())
            end)

            it("2 to 4", function()
                lst:splice(fourth, lst, second)
                assert.are.same({ 1, 3, 2, 4 }, lst:to_list())
                assert.are.same({ 4, 2, 3, 1 }, lst:to_reverse_list())
            end)

            it("4 to 1", function()
                lst:splice(first, lst, fourth)
                assert.are.same({ 4, 1, 2, 3 }, lst:to_list())
                assert.are.same({ 3, 2, 1, 4 }, lst:to_reverse_list())
            end)

            it("4 to 2", function()
                lst:splice(second, lst, fourth)
                assert.are.same({ 1, 4, 2, 3 }, lst:to_list())
                assert.are.same({ 3, 2, 4, 1 }, lst:to_reverse_list())
            end)

            it("4 to 3", function()
                lst:splice(third, lst, fourth)
                assert.are.same({ 1, 2, 4, 3 }, lst:to_list())
                assert.are.same({ 3, 4, 2, 1 }, lst:to_reverse_list())
            end)

            it("4 to 4", function()
                lst:splice(fourth, lst, fourth)
                assert.are.same({ 1, 2, 3, 4 }, lst:to_list())
                assert.are.same({ 4, 3, 2, 1 }, lst:to_reverse_list())
            end)
        end)

        describe("four args", function()
            it("1,2 to 2", function()
                lst:splice(second, lst, first, second)
                assert.are.same({ 1, 2, 3, 4 }, lst:to_list())
                assert.are.same({ 4, 3, 2, 1 }, lst:to_reverse_list())
            end)

            it("1,2 to 3", function()
                lst:splice(third, lst, first, second)
                assert.are.same({ 1, 2, 3, 4 }, lst:to_list())
                assert.are.same({ 4, 3, 2, 1 }, lst:to_reverse_list())
            end)

            it("1,2 to 4", function()
                lst:splice(fourth, lst, first, second)
                assert.are.same({ 3, 1, 2, 4 }, lst:to_list())
                assert.are.same({ 4, 2, 1, 3 }, lst:to_reverse_list())
            end)

            it("2,3 to 1", function()
                lst:splice(first, lst, second, third)
                assert.are.same({ 2, 3, 1, 4 }, lst:to_list())
                assert.are.same({ 4, 1, 3, 2 }, lst:to_reverse_list())
            end)

            it("2,3 to 3", function()
                lst:splice(third, lst, second, third)
                assert.are.same({ 1, 2, 3, 4 }, lst:to_list())
                assert.are.same({ 4, 3, 2, 1 }, lst:to_reverse_list())
            end)

            it("2,3 to 4", function()
                lst:splice(fourth, lst, second, third)
                assert.are.same({ 1, 2, 3, 4 }, lst:to_list())
                assert.are.same({ 4, 3, 2, 1 }, lst:to_reverse_list())
            end)

            it("1,2,3 to 3", function()
                lst:splice(third, lst, first, third)
                assert.are.same({ 1, 2, 3, 4 }, lst:to_list())
                assert.are.same({ 4, 3, 2, 1 }, lst:to_reverse_list())
            end)

            it("1,2,3 to 4", function()
                lst:splice(fourth, lst, first, third)
                assert.are.same({ 1, 2, 3, 4 }, lst:to_list())
                assert.are.same({ 4, 3, 2, 1 }, lst:to_reverse_list())
            end)

            it("2,3,4 to 1", function()
                lst:splice(first, lst, second, fourth)
                assert.are.same({ 2, 3, 4, 1 }, lst:to_list())
                assert.are.same({ 1, 4, 3, 2 }, lst:to_reverse_list())
            end)

            it("2,3,4 to 4", function()
                lst:splice(fourth, lst, second, fourth)
                assert.are.same({ 1, 2, 3, 4 }, lst:to_list())
                assert.are.same({ 4, 3, 2, 1 }, lst:to_reverse_list())
            end)

            it("1,2,3,4 to 1", function()
                lst:splice(first, lst, first, fourth)
                assert.are.same({ 1, 2, 3, 4 }, lst:to_list())
                assert.are.same({ 4, 3, 2, 1 }, lst:to_reverse_list())
            end)

            it("1,2,3,4 to 4", function()
                lst:splice(fourth, lst, first, fourth)
                assert.are.same({ 1, 2, 3, 4 }, lst:to_list())
                assert.are.same({ 4, 3, 2, 1 }, lst:to_reverse_list())
            end)
        end)
    end)

    describe("different list", function()
        local lst
        local that
        local first, second, third
        local fourth, fifth, sixth
        before_each(function()
            lst = DoubleLinkList.from_list({ 1, 2, 3 })
            that = DoubleLinkList().from_list({ 4, 5, 6 })
            first = lst.head
            second = first.right
            third = second.right
            fourth = that.head
            fifth = fourth.right
            sixth = fifth.right
        end)
        describe("two args", function()
            it("Works when lst is empty", function()
                lst = DoubleLinkList()
                lst:splice(lst.head, that)
                assert.are.same({ 4, 5, 6 }, lst:to_list())
                assert.are.same({ 6, 5, 4 }, lst:to_reverse_list())
                assert.are.same({}, that:to_list())
                assert.are.same({}, that:to_reverse_list())
            end)
            it("Works when that is empty", function()
                that = DoubleLinkList()
                lst:splice(first, that)
                assert.are.same({ 1, 2, 3 }, lst:to_list())
                assert.are.same({ 3, 2, 1 }, lst:to_reverse_list())
                assert.are.same({}, that:to_list())
                assert.are.same({}, that:to_reverse_list())

                lst:splice(second, that)
                assert.are.same({ 1, 2, 3 }, lst:to_list())
                assert.are.same({ 3, 2, 1 }, lst:to_reverse_list())
                assert.are.same({}, that:to_list())
                assert.are.same({}, that:to_reverse_list())

                lst:splice(third, that)
                assert.are.same({ 1, 2, 3 }, lst:to_list())
                assert.are.same({ 3, 2, 1 }, lst:to_reverse_list())
                assert.are.same({}, that:to_list())
                assert.are.same({}, that:to_reverse_list())
            end)

            it("to 1", function()
                lst:splice(first, that)
                assert.are.same({ 4, 5, 6, 1, 2, 3 }, lst:to_list())
                assert.are.same({ 3, 2, 1, 6, 5, 4 }, lst:to_reverse_list())
                assert.are.same({}, that:to_list())
                assert.are.same({}, that:to_reverse_list())
            end)

            it("to 2", function()
                lst:splice(second, that)
                assert.are.same({ 1, 4, 5, 6, 2, 3 }, lst:to_list())
                assert.are.same({ 3, 2, 6, 5, 4, 1 }, lst:to_reverse_list())
                assert.are.same({}, that:to_list())
                assert.are.same({}, that:to_reverse_list())
            end)

            it("to 3", function()
                lst:splice(third, that)
                assert.are.same({ 1, 2, 4, 5, 6, 3 }, lst:to_list())
                assert.are.same({ 3, 6, 5, 4, 2, 1 }, lst:to_reverse_list())
                assert.are.same({}, that:to_list())
                assert.are.same({}, that:to_reverse_list())
            end)
        end)

        describe("three args", function()
            it("4 to 1", function()
                lst:splice(first, that, fourth)
                assert.are.same({ 4, 1, 2, 3 }, lst:to_list())
                assert.are.same({ 3, 2, 1, 4 }, lst:to_reverse_list())
                assert.are.same({ 5, 6 }, that:to_list())
                assert.are.same({ 6, 5 }, that:to_reverse_list())
            end)

            it("4 to 2", function()
                lst:splice(second, that, fourth)
                assert.are.same({ 1, 4, 2, 3 }, lst:to_list())
                assert.are.same({ 3, 2, 4, 1 }, lst:to_reverse_list())
                assert.are.same({ 5, 6 }, that:to_list())
                assert.are.same({ 6, 5 }, that:to_reverse_list())
            end)

            it("4 to 3", function()
                lst:splice(third, that, fourth)
                assert.are.same({ 1, 2, 4, 3 }, lst:to_list())
                assert.are.same({ 3, 4, 2, 1 }, lst:to_reverse_list())
                assert.are.same({ 5, 6 }, that:to_list())
                assert.are.same({ 6, 5 }, that:to_reverse_list())
            end)

            it("5 to 1", function()
                lst:splice(first, that, fifth)
                assert.are.same({ 5, 1, 2, 3 }, lst:to_list())
                assert.are.same({ 3, 2, 1, 5 }, lst:to_reverse_list())
                assert.are.same({ 4, 6 }, that:to_list())
                assert.are.same({ 6, 4 }, that:to_reverse_list())
            end)

            it("5 to 2", function()
                lst:splice(second, that, fifth)
                assert.are.same({ 1, 5, 2, 3 }, lst:to_list())
                assert.are.same({ 3, 2, 5, 1 }, lst:to_reverse_list())
                assert.are.same({ 4, 6 }, that:to_list())
                assert.are.same({ 6, 4 }, that:to_reverse_list())
            end)

            it("5 to 3", function()
                lst:splice(third, that, fifth)
                assert.are.same({ 1, 2, 5, 3 }, lst:to_list())
                assert.are.same({ 3, 5, 2, 1 }, lst:to_reverse_list())
                assert.are.same({ 4, 6 }, that:to_list())
                assert.are.same({ 6, 4 }, that:to_reverse_list())
            end)

            it("6 to 1", function()
                lst:splice(first, that, sixth)
                assert.are.same({ 6, 1, 2, 3 }, lst:to_list())
                assert.are.same({ 3, 2, 1, 6 }, lst:to_reverse_list())
                assert.are.same({ 4, 5 }, that:to_list())
                assert.are.same({ 5, 4 }, that:to_reverse_list())
            end)

            it("6 to 2", function()
                lst:splice(second, that, sixth)
                assert.are.same({ 1, 6, 2, 3 }, lst:to_list())
                assert.are.same({ 3, 2, 6, 1 }, lst:to_reverse_list())
                assert.are.same({ 4, 5 }, that:to_list())
                assert.are.same({ 5, 4 }, that:to_reverse_list())
            end)

            it("6 to 3", function()
                lst:splice(third, that, sixth)
                assert.are.same({ 1, 2, 6, 3 }, lst:to_list())
                assert.are.same({ 3, 6, 2, 1 }, lst:to_reverse_list())
                assert.are.same({ 4, 5 }, that:to_list())
                assert.are.same({ 5, 4 }, that:to_reverse_list())
            end)
        end)

        describe("four args", function()
            it("4,5 to 1", function()
                lst:splice(first, that, fourth, fifth)
                assert.are.same({ 4, 5, 1, 2, 3 }, lst:to_list())
                assert.are.same({ 3, 2, 1, 5, 4 }, lst:to_reverse_list())
                assert.are.same({ 6 }, that:to_list())
                assert.are.same({ 6 }, that:to_reverse_list())
            end)

            it("4,5 to 2", function()
                lst:splice(second, that, fourth, fifth)
                assert.are.same({ 1, 4, 5, 2, 3 }, lst:to_list())
                assert.are.same({ 3, 2, 5, 4, 1 }, lst:to_reverse_list())
                assert.are.same({ 6 }, that:to_list())
                assert.are.same({ 6 }, that:to_reverse_list())
            end)

            it("4,5 to 3", function()
                lst:splice(third, that, fourth, fifth)
                assert.are.same({ 1, 2, 4, 5, 3 }, lst:to_list())
                assert.are.same({ 3, 5, 4, 2, 1 }, lst:to_reverse_list())
                assert.are.same({ 6 }, that:to_list())
                assert.are.same({ 6 }, that:to_reverse_list())
            end)

            it("5,6 to 1", function()
                lst:splice(first, that, fifth, sixth)
                assert.are.same({ 5, 6, 1, 2, 3 }, lst:to_list())
                assert.are.same({ 3, 2, 1, 6, 5 }, lst:to_reverse_list())
                assert.are.same({ 4 }, that:to_list())
                assert.are.same({ 4 }, that:to_reverse_list())
            end)

            it("5,6 to 2", function()
                lst:splice(second, that, fifth, sixth)
                assert.are.same({ 1, 5, 6, 2, 3 }, lst:to_list())
                assert.are.same({ 3, 2, 6, 5, 1 }, lst:to_reverse_list())
                assert.are.same({ 4 }, that:to_list())
                assert.are.same({ 4 }, that:to_reverse_list())
            end)

            it("5,6 to 3", function()
                lst:splice(third, that, fifth, sixth)
                assert.are.same({ 1, 2, 5, 6, 3 }, lst:to_list())
                assert.are.same({ 3, 6, 5, 2, 1 }, lst:to_reverse_list())
                assert.are.same({ 4 }, that:to_list())
                assert.are.same({ 4 }, that:to_reverse_list())
            end)

            it("4,6 to 1", function()
                lst:splice(first, that, fourth, sixth)
                assert.are.same({ 4, 5, 6, 1, 2, 3 }, lst:to_list())
                assert.are.same({ 3, 2, 1, 6, 5, 4 }, lst:to_reverse_list())
                assert.are.same({}, that:to_list())
                assert.are.same({}, that:to_reverse_list())
            end)

            it("4,6 to 2", function()
                lst:splice(second, that, fourth, sixth)
                assert.are.same({ 1, 4, 5, 6, 2, 3 }, lst:to_list())
                assert.are.same({ 3, 2, 6, 5, 4, 1 }, lst:to_reverse_list())
                assert.are.same({}, that:to_list())
                assert.are.same({}, that:to_reverse_list())
            end)

            it("4,6 to 3", function()
                lst:splice(third, that, fourth, sixth)
                assert.are.same({ 1, 2, 4, 5, 6, 3 }, lst:to_list())
                assert.are.same({ 3, 6, 5, 4, 2, 1 }, lst:to_reverse_list())
                assert.are.same({}, that:to_list())
                assert.are.same({}, that:to_reverse_list())
            end)
        end)
    end)
end)
