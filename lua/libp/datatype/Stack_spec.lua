local Stack = require("libp.datatype.Stack")

describe("Constructor", function()
    it("Takes zero arguments", function()
        local s = Stack()
        assert.are.same({}, s)
    end)
    it("Takes a list", function()
        local s = Stack({ 1, 2, 3 })
        assert.are.same({ 1, 2, 3 }, s)
    end)
end)

describe("push", function()
    it("Pushes elements to the last", function()
        local s = Stack()
        s:push(1)
        assert.are.same({ 1 }, s)
        s:push(2)
        assert.are.same({ 1, 2 }, s)
    end)
end)

describe("pop", function()
    it("Pops element from the last", function()
        local s = Stack({ 1, 2, 3 })
        assert.are.same(3, s:pop())
        assert.are.same({ 1, 2 }, s)
        assert.are.same(2, s:pop())
        assert.are.same({ 1 }, s)
    end)
end)

describe("top", function()
    it("Returns the last element", function()
        local s = Stack({ 1, 2, 3 })
        assert.are.same(3, s:top())
        s:push(4)
        assert.are.same(4, s:top())
    end)
end)

describe("size", function()
    it("Returns the stack size", function()
        local s = Stack({})
        assert.are.same(0, s:size())
        s:push(1)
        assert.are.same(1, s:size())
    end)
end)

describe("empty", function()
    it("Returns whether the stack is empty", function()
        local s = Stack({})
        assert.is_true(s:empty())
        s:push(1)
        assert.is_false(s:empty())
    end)
end)
