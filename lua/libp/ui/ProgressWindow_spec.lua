local ProgressWindow = require("libp.ui.ProgressWindow")
local styles = require("libp.ui.progressbar_style")
local test_style = "clock"
local style_with_two_element = "toggle7"
local vimfn = require("libp.utils.vimfn")

describe("tick", function()
    describe("total is known", function()
        it("Defaults to no desc", function()
            local p = ProgressWindow({ total = 10 })
            p:open()
            p:tick(0)
            assert.are.same({ "" }, vimfn.buf_get_lines({ buffer = p.buffer.id }))
            p:tick(1)
            assert.is_true(vim.startswith(vimfn.buf_get_line(0, p.buffer.id), "█"))
        end)
        it("Respects input desc", function()
            local p = ProgressWindow({ desc = "Desc:", total = 10 })
            p:open()
            p:tick(0)
            assert.are.same({ "Desc:" }, vimfn.buf_get_lines({ buffer = p.buffer.id }))
            p:tick(1)
            assert.is_true(vim.startswith(vimfn.buf_get_line(0, p.buffer.id), "Desc:█"))
        end)
        it("Automatically close when reaching total", function()
            local p = ProgressWindow({ desc = "Desc:", total = 10 })
            p:open()
            assert.is_true(vim.api.nvim_win_is_valid(p.id))
            p:tick(10)
            assert.is_false(vim.api.nvim_win_is_valid(p.id))
        end)
    end)

    describe("total is unknown", function()
        it("Defaults to no desc", function()
            local p = ProgressWindow({ style = test_style })
            p:open()
            p:tick(0)
            assert.are.same({ styles[test_style][1] }, vimfn.buf_get_lines({ buffer = p.buffer.id }))
            p:tick(1)
            assert.are.same({ styles[test_style][2] }, vimfn.buf_get_lines({ buffer = p.buffer.id }))
            p:close()
        end)
        it("Respects input desc", function()
            local p = ProgressWindow({ desc = "Desc:", style = test_style })
            p:open()
            p:tick(0)
            assert.are.same({ "Desc:" .. styles[test_style][1] }, vimfn.buf_get_lines({ buffer = p.buffer.id }))
            p:tick(1)
            assert.are.same({ "Desc:" .. styles[test_style][2] }, vimfn.buf_get_lines({ buffer = p.buffer.id }))
            p:close()
        end)
        it("Wraps around style array", function()
            local p = ProgressWindow({ style = style_with_two_element })
            p:open()
            p:tick(0)
            assert.are.same({ styles[style_with_two_element][1] }, vimfn.buf_get_lines({ buffer = p.buffer.id }))
            p:tick(1)
            assert.are.same({ styles[style_with_two_element][2] }, vimfn.buf_get_lines({ buffer = p.buffer.id }))
            p:tick(1)
            assert.are.same({ styles[style_with_two_element][1] }, vimfn.buf_get_lines({ buffer = p.buffer.id }))
            p:close()
        end)
    end)
end)
